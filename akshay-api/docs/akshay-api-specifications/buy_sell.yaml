openapi: 3.0.3
info:
  title: Buy and Sell API
  description: API for managing buy and sell transactions for coins, updating USDT balance.
  version: "1.0.0"
servers:
  - url: http://localhost:9000
    description: Local development envirornment
paths:
  /coins:
    get:
      summary: Get a list of all available coins.
      description: Retrieve a list of all available coins with their current prices.
      responses:
        '200':
          description: A list of coins with details.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Coin'
        '400':
          description: Bad request due to invalid parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /transactions:
    post:
      summary: Place a buy or sell order.
      description: Place a new buy or sell order for a specific coin and update the USDT balance of the user.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TransactionRequest'
            example:
              userId: "12345"
              coinId: "bitcoin"
              type: "buy"
              quantity: 1.5
      responses:
        '201':
          description: Order successfully placed and USDT balance updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'
        '400':
          description: Invalid order request. Missing or invalid parameters.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '401':
          description: Unauthorized access due to invalid or missing authentication token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Coin or user not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /transactions/{id}:
    get:
      summary: Retrieve transaction details.
      description: Get the details of a specific transaction by ID.
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
          description: The unique ID of the transaction.
      responses:
        '200':
          description: Details of the specified transaction.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'
        '400':
          description: Invalid transaction ID format.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '404':
          description: Transaction not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '500':
          description: Internal server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

components:
  schemas:
    Coin:
      type: object
      properties:
        coinId:
          type: string
          description: Unique identifier for the coin.
          example: "bitcoin"
        name:
          type: string
          description: Name of the coin.
          example: "Bitcoin"
        symbol:
          type: string
          description: Symbol of the coin.
          example: "BTC"
        price:
          type: number
          format: double
          description: Current price of the coin.
          example: 35000.25

    TransactionRequest:
      type: object
      properties:
        userId:
          type: string
          description: Unique identifier of the user placing the order.
          example: "12345"
        coinId:
          type: string
          description: Unique identifier of the coin.
          example: "bitcoin"
        type:
          type: string
          description: Type of the transaction, either "buy" or "sell".
          enum: ["buy", "sell"]
          example: "buy"
        quantity:
          type: number
          format: double
          description: Quantity of the coin for the transaction.
          example: 1.5

    TransactionResponse:
      type: object
      properties:
        transactionId:
          type: string
          description: Unique identifier of the transaction.
          example: "67890"
        userId:
          type: string
          description: Unique identifier of the user.
          example: "12345"
        coinId:
          type: string
          description: Unique identifier of the coin.
          example: "bitcoin"
        type:
          type: string
          description: Type of transaction, either "buy" or "sell".
          example: "buy"
        quantity:
          type: number
          format: double
          description: Quantity of the coin.
          example: 1.5
        price:
          type: number
          format: double
          description: Price at which the transaction was completed.
          example: 34000.0
        usdtBalance:
          type: number
          format: double
          description: The updated USDT balance of the user after the transaction.
          example: 5000.75
        timestamp:
          type: string
          format: date-time
          description: The date and time when the transaction was completed.
          example: "2024-11-12T15:30:00Z"

    ErrorResponse:
      type: object
      properties:
        errorCode:
          type: string
          description: A code representing the error.
          example: "ERR_TRANSACTION_NOT_FOUND"
        message:
          type: string
          description: Human-readable message explaining the error.
          example: "Transaction not found for the given ID."