openapi: 3.0.0
info:
  title: Buy,Sell and Order-history API
  description: |
    buying and selling coins.
    Users can also track their transaction history, which records all buy and sell activities.
  version: 1.0.0

servers:
  - url: http://localhost:9000
    description: Local development envirornment

paths:
  /users/{email}/coins/buy:
    post:
      summary: Buy a coin for a user and add it to their portfolio.
      description: |
        This endpoint allows users to purchase a specific coin. The transaction will be recorded in the order history,
        and the user's portfolio will be updated. The user's balance (in USDT) will be deducted based on the value of the coin.
      operationId: buyCoin
      parameters:
        - name: email
          in: path
          required: true
          description: The email address of the user making the purchase.
          schema:
            type: string
            format: email
            example: "user@example.com"
      requestBody:
        description: The details of the coin to be purchased and its cost.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                coinName:
                  type: string
                  description: The name of the coin to be purchased.
                  example: "Bitcoin"
                quantity:
                  type: number
                  format: float
                  description: The number of coins to purchase.
                  example: 2
                value:
                  type: number
                  format: float
                  description: The value of the coin in USDT to be deducted from the user's balance.
                  example: 30000
              required:
                - coinName
                - quantity
                - value
      responses:
        '200':
          description: Coin purchased successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Confirmation message that the purchase was successful.
                    example: "Coin purchased successfully"
                  balance:
                    type: number
                    format: float
                    description: The updated balance of the user after the transaction.
                    example: 70000
                  transactionId:
                    type: string
                    description: A unique identifier for the transaction.
                    example: "64b12345abcd67890ef12345"
        '400':
          description: Insufficient balance
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message indicating why the transaction failed.
                    example: "Insufficient balance"

  /users/{email}/coins/sell:
    post:
      summary: Sell a coin for a user and update their portfolio.
      description: |
        This endpoint allows users to sell a specific coin. The user's balance will be updated with the sale value,
        and the portfolio will be updated by removing the sold coins. The transaction will also be recorded in the order history.
      operationId: sellCoin
      parameters:
        - name: email
          in: path
          required: true
          description: The email address of the user selling the coin.
          schema:
            type: string
            format: email
            example: "user@example.com"
      requestBody:
        description: The details of the coin to be sold and its value.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                coinName:
                  type: string
                  description: The name of the coin to be sold.
                  example: "Bitcoin"
                quantity:
                  type: number
                  format: float
                  description: The number of coins to sell.
                  example: 1
                value:
                  type: number
                  format: float
                  description: The value of the coin in USDT to be added to the user's balance.
                  example: 35000
              required:
                - coinName
                - quantity
                - value
      responses:
        '200':
          description: Coin sold successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Confirmation message that the sale was successful.
                    example: "Coin sold successfully"
                  balance:
                    type: number
                    format: float
                    description: The updated balance of the user after the transaction.
                    example: 135000
                  transactionId:
                    type: string
                    description: A unique identifier for the transaction.
                    example: "64b98765efgh12345abcd678"
        '400':
          description: Insufficient coin quantity
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message indicating why the transaction failed.
                    example: "Insufficient coin quantity"

  /users/{email}/order-history:
    get:
      summary: Retrieve a user's transaction history.
      description: |
        This endpoint retrieves all buy and sell transactions for a specific user, including details like coin name,
        quantity, value, transaction type, and timestamp. It returns an array of transaction objects.
      operationId: getOrderHistory
      parameters:
        - name: email
          in: path
          required: true
          description: The email address of the user whose transaction history is being retrieved.
          schema:
            type: string
            format: email
            example: "user@example.com"
      responses:
        '200':
          description: A list of all transactions for the user.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    transactionId:
                      type: string
                      description: A unique identifier for the transaction.
                      example: "64b12345abcd67890ef12345"
                    coinName:
                      type: string
                      description: The name of the coin involved in the transaction.
                      example: "Bitcoin"
                    quantity:
                      type: number
                      format: float
                      description: The number of coins bought or sold in the transaction.
                      example: 2
                    value:
                      type: number
                      format: float
                      description: The value of the transaction in USDT.
                      example: 30000
                    transactionType:
                      type: string
                      enum:
                        - "BUY"
                        - "SELL"
                      description: The type of the transaction (buy or sell).
                      example: "BUY"
                    createdAt:
                      type: string
                      format: date-time
                      description: The timestamp when the transaction occurred.
                      example: "2024-11-18T12:00:00.000Z"
        '404':
          description: No transactions found for the user.
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    description: Error message when no transactions are found.
                    example: "No transactions found for user"

components:
  schemas:
    BuySellCoinRequest:
      type: object
      properties:
        coinName:
          type: string
          description: The name of the coin to buy or sell.
          example: "Bitcoin"
        quantity:
          type: number
          format: float
          description: The number of coins to buy or sell.
          example: 2
        value:
          type: number
          format: float
          description: The value of the transaction in USDT.
          example: 30000
      required:
        - coinName
        - quantity
        - value

    Transaction:
      type: object
      properties:
        transactionId:
          type: string
          description: Unique identifier for the transaction.
          example: "64b12345abcd67890ef12345"
        coinName:
          type: string
          description: The name of the coin involved in the transaction.
          example: "Bitcoin"
        quantity:
          type: number
          format: float
          description: The number of coins involved in the transaction.
          example: 2
        value:
          type: number
          format: float
          description: The value of the transaction in USDT.
          example: 30000
        transactionType:
          type: string
          enum:
            - "BUY"
            - "SELL"
          description: The type of transaction (buy or sell).
          example: "BUY"
        createdAt:
          type: string
          format: date-time
          description: The timestamp of when the transaction occurred.
          example: "2024-11-18T12:00:00.000Z"